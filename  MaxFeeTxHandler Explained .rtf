{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 Times-Italic;\f4\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid502\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1102\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1402\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This 
\f1\fs26 MaxFeeTxHandler
\f0\fs24  code is much more complex than the first one.\
The simple 
\f1\fs26 TxHandler
\f0\fs24  was like a 
\f2\b "fast teller"
\f0\b0 \'97they just grabbed the first valid transaction they saw, approved it, and moved on.\
This 
\f1\fs26 MaxFeeTxHandler
\f0\fs24  is like a 
\f2\b "premium, super-smart teller"
\f0\b0  \uc0\u55357 \u56496 . Their job isn't to be fast; it's to look at the 
\f3\i entire pile
\f0\i0  of transactions and find the 
\f3\i one specific combination
\f0\i0  that gives the bank the 
\f2\b maximum possible fee
\f0\b0 .\
This requires a "try every possibility" strategy, which is much more complex. Let's break it down.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 Imports and Class Definition\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 import java.security.PublicKey;\
import java.util.ArrayList;\
import java.util.Arrays;\
import java.util.Collections;\
import java.util.HashSet;\
import java.util.List;\
import java.util.Set;\
\
public class MaxFeeTxHandler \{\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "We're creating the 'Premium Teller's Rulebook.' We'll need all the same tools as before (Lists, Sets, etc.) for handling transactions."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 The Constructor\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     private UTXOPool internalPool;\
    public MaxFeeTxHandler(UTXOPool utxoPool) \{\
        this.internalPool = new UTXOPool(utxoPool);\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "Same as before. When the premium teller starts their shift, they get the master ledger (
\f1\fs26 utxoPool
\f0\fs24 ) and make their own photocopy (
\f1\fs26 this.internalPool
\f0\fs24 ) to work from."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 Helper 1: 
\f4\fs30\fsmilli15210 isValidTx
\f2\fs28  (The 5-Point Check)\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     private boolean isValidTx(Transaction tx, UTXOPool pool) \{\
        // ... (all 5 checks from TxHandler) ...\
        return inputSum >= outputSum;\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "This is the 
\f2\b exact same 5-point checklist
\f0\b0  from the first 
\f1\fs26 TxHandler
\f0\fs24  (does the money exist, is it signed, no double-spends, etc.)."\
\ls3\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Key Difference:
\f0\b0  This version is a "tool" that can check a transaction against 
\f3\i any
\f0\i0  ledger you hand it (
\f1\fs26 UTXOPool pool
\f0\fs24 ). The old one could 
\f3\i only
\f0\i0  use the teller's main ledger. This flexibility is vital for our new strategy, where we'll be imagining many different "what if" scenarios.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 Helper 2: 
\f4\fs30\fsmilli15210 calculateFee
\f2\fs28  (The Calculator)\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     private double calculateFee(Transaction tx, UTXOPool pool) \{\
        // ... (adds up inputs, adds up outputs) ...\
        return inputSum - outputSum;\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "This is a simple calculator. Its only job is to look at a transaction and a 
\f3\i specific
\f0\i0  ledger, add up all the 'Money IN' (inputs), add up all the 'Money OUT' (outputs), and return the difference, which is the 
\f2\b transaction fee
\f0\b0 ."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 Main Job: 
\f4\fs30\fsmilli15210 handleTxs
\f2\fs28  (The Manager)\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     public Transaction[] handleTxs(Transaction[] possibleTxs) \{\
        Set<Transaction> optimalSet = findMaxFeeSet(this.internalPool, new HashSet<>(Arrays.asList(possibleTxs)));\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "This is the main task. The teller is given the pile of 
\f1\fs26 possibleTxs
\f0\fs24 ."\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f1\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Set<Transaction> optimalSet = findMaxFeeSet(...)
\f0\fs24 : "This is the most important step. The teller doesn't try to solve the puzzle themselves. Instead, they call a 'super-smart helper' method (
\f1\fs26 findMaxFeeSet
\f0\fs24 ). They hand the helper their ledger and the pile of transactions, saying, 'Figure out the 
\f3\i one perfect combination
\f0\i0  that gives the most fees.'"\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // ... (looping logic to process the optimalSet) ...\
        \
        List<Transaction> txsToProcess = new ArrayList<>(optimalSet);\
        // ... (rest of the processing loop) ...\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "After the helper (
\f1\fs26 findMaxFeeSet
\f0\fs24 ) hands back the 
\f3\i perfect
\f0\i0  set of transactions (
\f1\fs26 optimalSet
\f0\fs24 ), this part is just cleanup. It's the 
\f2\b exact same looping logic from the first 
\f4\fs26 TxHandler
\f0\b0\fs24 . Its only job now is to:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls6\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Take that perfect set.\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Process them in the right order (in case one depends on another).\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Officially update the teller's 
\f3\i own
\f0\i0  ledger (
\f1\fs26 this.internalPool
\f0\fs24 ) by removing the spent coins and adding the new ones.\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Return the final, approved list."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 The Real Brain: 
\f4\fs30\fsmilli15210 findMaxFeeSet
\f2\fs28  (The Super-Smart Helper)\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
This is the most complex part. It uses 
\f2\b recursion
\f0\b0  (a function that calls itself) to explore every possible future. Think of it like exploring every single path in a "choose your own adventure" book to find the best ending.\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     private Set<Transaction> findMaxFeeSet(UTXOPool pool, Set<Transaction> remainingTxs) \{\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "This is the 'super-smart helper.' It takes a ledger (
\f1\fs26 pool
\f0\fs24 ) and a 'To-Do Pile' (
\f1\fs26 remainingTxs
\f0\fs24 )."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         if (remainingTxs.isEmpty()) \{\
            return new HashSet<>();\
        \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls8\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "
\f2\b Base Case:
\f0\b0  If the 'To-Do Pile' is empty, the max fee we can get is $0. We return an empty list. (This is the end of a path)."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         List<Transaction> txsList = new ArrayList<>(remainingTxs);\
        Transaction tx = txsList.remove(0);\
        Set<Transaction> remaining = new HashSet<>(txsList);\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls9\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "Let's make a decision. We'll pull 
\f2\b one single transaction (
\f4\fs26 tx
\f2\fs24 )
\f0\b0  off the top of the pile. The 
\f1\fs26 remaining
\f0\fs24  transactions are everyone else."\
\ls9\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Big Question:
\f0\b0  "For this 
\f3\i one
\f0\i0  transaction, we have two possible futures: we can 
\f2\b INCLUDE
\f0\b0  it, or we can 
\f2\b SKIP
\f0\b0  it. We must explore both paths to see which one makes more money."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // --- Branch 1: EXCLUDE this transaction ---\
        Set<Transaction> setExclude = findMaxFeeSet(pool, remaining);\
        double feeExclude = getTotalFee(setExclude, pool);\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls10\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "
\f2\b PATH 1: We SKIP 
\f4\fs26 tx
\f2\fs24 .
\f0\b0 "\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls10\ilvl0
\f1\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 findMaxFeeSet(pool, remaining)
\f0\fs24 : "Let's ask a 'sub-helper' to find the best possible fee from the 
\f3\i rest
\f0\i0  of the pile (
\f1\fs26 remaining
\f0\fs24 ), using our 
\f3\i current
\f0\i0  ledger (
\f1\fs26 pool
\f0\fs24 )."\
\ls10\ilvl0
\f1\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 double feeExclude = ...
\f0\fs24 : "We get that helper's result and calculate its total fee. This is our 'Skip-It' score."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // --- Branch 2: INCLUDE this transaction ---\
        if (!isValidTx(tx, pool)) \{\
            return setExclude;\
        \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "
\f2\b PATH 2: We TRY TO INCLUDE 
\f4\fs26 tx
\f2\fs24 .
\f0\b0 "\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f1\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if (!isValidTx(tx, pool))
\f0\fs24 : "First, can we even include it? Is it valid on our current ledger? If not, this path is a 
\f2\b dead end
\f0\b0 . We give up and just return the 'Skip-It' set (
\f1\fs26 setExclude
\f0\fs24 )."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // It is valid, so we can *try* to include it.\
        double feeInclude = calculateFee(tx, pool);\
        \
        UTXOPool nextPool = new UTXOPool(pool);\
        // ... (remove inputs and add outputs from 'tx' to 'nextPool') ...\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "It 
\f3\i is
\f0\i0  valid! Great.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's grab its fee (
\f1\fs26 feeInclude
\f0\fs24 ).\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We must now imagine the future. We make a 
\f3\i new photocopy
\f0\i0  of the ledger (
\f1\fs26 nextPool
\f0\fs24 ) and update it as if 
\f1\fs26 tx
\f0\fs24  was approved (cross off its inputs, add its outputs)."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // Now, we must remove all conflicting transactions\
        Set<Transaction> remainingAfterInclude = new HashSet<>();\
        // ... (loop to find and remove any tx that conflicts with 'tx') ...\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls13\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "Now, we look at the 
\f3\i rest
\f0\i0  of the pile (
\f1\fs26 remaining
\f0\fs24 ). If any of those transactions try to spend the 
\f3\i same coins
\f0\i0  that 
\f1\fs26 tx
\f0\fs24  just spent, they are now invalid (a double-spend). We throw all those 'conflicting' transactions in the trash."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // Recurse on the remaining non-conflicting transactions\
        Set<Transaction> setInclude = findMaxFeeSet(nextPool, remainingAfterInclude);\
        \
        feeInclude += getTotalFee(setInclude, nextPool);\
        setInclude.add(tx);\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "We now ask 
\f3\i another
\f0\i0  'sub-helper' to find the max fee from the 
\f3\i non-conflicting
\f0\i0  pile (
\f1\fs26 remainingAfterInclude
\f0\fs24 ), using our 
\f3\i new
\f0\i0  ledger (
\f1\fs26 nextPool
\f0\fs24 )."\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f1\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 feeInclude += ...
\f0\fs24 : "We get that sub-helper's result and add its fee to our 
\f1\fs26 feeInclude
\f0\fs24  score."\
\ls14\ilvl0
\f1\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 setInclude.add(tx)
\f0\fs24 : "We add our current transaction (
\f1\fs26 tx
\f0\fs24 ) to that helper's set. This is our final 'Include-It' set."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0         // --- Compare and return the best branch ---\
        if (feeInclude > feeExclude) \{\
            return setInclude;\
        \} else \{\
            return setExclude;\
        \}\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "
\f2\b The Final Decision:
\f0\b0  We compare the two scores.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls15\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If 
\f1\fs26 feeInclude > feeExclude
\f0\fs24 : "The 'Include-It' path made more money! We return that set."\
\ls15\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Else: "The 'Skip-It' path was better. We return that set."\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 "This process repeats thousands of times, creating a giant tree of 'include/skip' decisions until every single possibility has been checked and the one single best path floats all the way back to the top 
\f1\fs26 handleTxs
\f0\fs24  function."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 Helper 3: 
\f4\fs30\fsmilli15210 getTotalFee
\f2\fs28  (The Set Calculator)\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0     private double getTotalFee(Set<Transaction> txs, UTXOPool pool) \{\
        // ... (iterative loop from TxHandler) ...\
        return totalFee;\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls16\ilvl0
\f2\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f0\b0  "This is just a small tool for the 'super-smart helper.' Its job is to find the total fee of a 
\f3\i set
\f0\i0  of transactions. It can't just add up their fees, because some transactions in the set might depend on others. So, it uses the 
\f2\b same looping trick from the first 
\f4\fs26 TxHandler
\f0\b0\fs24  to process them in the correct order, adding up the fees as it goes."\
}